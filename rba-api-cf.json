{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "RBA-CloudFormation",
	"Parameters": {
        "userTableName": {
            "Type": "String",
            "Default": "myapp.User",
            "Description": "Name of the user table"
        },
        "userIndexName": {
            "Type": "String",
            "Default": "user-city-index",
            "Description": "Name of the user index"
        }
    },
    "Resources": {
        "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "-api"
                        ]
                    ]
                }
            }
        },
        "ApiGatewayPostMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "ApiKeyRequired": true,
                "AuthorizationType": "NONE",
                "HttpMethod": "POST",
                "Integration": {
                    "Type": "AWS",
                    "Credentials": {
                        "Fn::GetAtt": [
                            "GatewayRole",
                            "Arn"
                        ]
                    },
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":kinesis:action/PutRecord"
                            ]
                        ]
                    },
                    "IntegrationHttpMethod": "POST",
                    "RequestTemplates": {
                        "application/json": {
                            "Fn::Join": [
                                "",
                                [
                                    "#set($payload = $input.json('$'))\n",
									"#set($data = \"{\"\"payload\"\": $payload, \"\"connectionId\"\": \"\"$context.connectionId\"\"}\")\n{\n    \"Data\": \"$util.base64Encode($data)\",\n    \"PartitionKey\": \"$context.connectionId\",\n    \"StreamName\": \"${EventStream}\"\n}\n",
                                    "{\n",
                                    "\"DeliveryStreamName\": \"",
                                    {
                                        "Ref": "EventStream"
                                    },
                                    "\",\n",
                                    " \"Record\": { \"Data\": \"$b64\" }\n}"
                                ]
                            ]
                        }
                    },
                    "RequestParameters": {
                        "integration.request.header.Content-Type": "'application/x-amz-json-1.1'"
                    },
                    "IntegrationResponses": [
                        {
                            "StatusCode": 200,
                            "ResponseTemplates": {
                                "application/json": "{\"status\":\"OK\"}"
                            }
                        }
                    ]
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200
                    }
                ],
                "ResourceId": {
                    "Fn::GetAtt": [
                        "ApiGatewayRestApi",
                        "RootResourceId"
                    ]
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "GatewayRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "apigateway.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "GatewayRolePolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
								{
								"Effect": "Allow",
								"Action": "kinesis:PutRecord",
								"Resource": {
									"Fn::GetAtt": [
										"EventStream",
										"Arn"
										]
									}
								}
							]	
                        }
                    }
                ]
            }
        },
        "ApiGatewayDeployment": {
            "Type": "AWS::ApiGateway::Deployment",
            "DependsOn": [
                "ApiGatewayPostMethod"
            ],
            "Properties": {
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
		"EventStream": {
			"Type": "AWS::Kinesis::Stream",
			"Properties": {
				"ShardCount": 1
			}
		},
		"EventStreamConsumer": {
            "Type": "AWS::Kinesis::StreamConsumer",
            "Properties": {
                "ConsumerName": "lambda",
                "StreamARN": {
                    "Fn::GetAtt": [
                        "EventStream",
                        "Arn"
                    ]
                }
            }
        },
		"EventSourceMapping": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "Properties": {
                "BatchSize": 16,
                "Enabled": true,
                "EventSourceArn": {
                    "Ref": "EventStreamConsumer"
                },
                "FunctionName": {
                    "Fn::GetAtt": [
                        "StreamFunction",
                        "Arn"
                    ]
                },
                "StartingPosition": "LATEST"
            }
        },
		"Stage": {
            "Type": "AWS::ApiGateway::Stage",
            "Properties": {
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "DeploymentId": {
                    "Ref": "ApiGatewayDeployment"
                },
                "StageName": "v1"                
            }
        },
        "StreamFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "index.handler",
                "Runtime": "nodejs12.x",
                "MemorySize": 128,
                "Timeout": 30,
                "Role": {
                    "Fn::GetAtt": [
                        "StreamRole",
                        "Arn"
                    ]
                },
                "Code": {
                    "S3Bucket": "rba-functions-container",
					"S3Key": "RBAContextDataReceiver.zip"
                }
            }
        },
        "StreamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "lambda",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "execute-api:ManageConnections",
                                    "Resource": {
                                        "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/${Stage}/POST/@connections/*"
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "kinesis:ListShards"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "kinesis:SubscribeToShard",
                                        "kinesis:DescribeStreamSummary",
                                        "kinesis:GetShardIterator",
                                        "kinesis:GetRecords"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::GetAtt": [
                                                "EventStream",
                                                "Arn"
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "kinesis:SubscribeToShard"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::GetAtt": [
                                                "EventStreamConsumer",
                                                "ConsumerARN"
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
		"ContextPutData": {
			"Type": "AWS::SNS::Topic",
			"Properties": {
				"Subscription": [{
					"Endpoint": {
						"Fn::GetAtt": ["RBAContextPutData", "Arn"]
					},
					"Protocol": "lambda"
				}
				]
			}
		},
		"LambdaResourcePolicy": {
			"Type": "AWS::Lambda::Permission",
			"Properties": {
				"FunctionName": { "Fn::GetAtt": [ "RBAContextPutData", "Arn" ] },
				"Principal": "sns.amazonaws.com",
				"Action": "lambda:InvokeFunction",
				"SourceArn" : { "Ref" : "ContextPutData" }
			}
		},
		"RBAContextPutData": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "index.handler",
                "Runtime": "nodejs12.x",
                "MemorySize": 128,
                "Timeout": 30,
                "Role": {
                    "Fn::GetAtt": [
                        "StreamRole",
                        "Arn"
                    ]
                },
                "Code": {
                    "S3Bucket": "rba-functions-container",
					"S3Key": "RBA_Context_PutData.zip"
                }
            }
        },
		"tableMyAppUser": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "TableName": {
                    "Ref": "userTableName"
                },
                "AttributeDefinitions": [
                    {
                        "AttributeName": "userId",
                        "AttributeType": "S"
                    },
                    {
                        "AttributeName": "city",
                        "AttributeType": "S"
                    },
                    {
                        "AttributeName": "signupDate",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [
                    {
                        "AttributeName": "userId",
                        "KeyType": "HASH"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                },
                "GlobalSecondaryIndexes": [
                    {
                        "IndexName": {
                            "Ref": "userIndexName"
                        },
                        "KeySchema": [
                            {
                                "AttributeName": "city",
                                "KeyType": "HASH"
                            },
                            {
                                "AttributeName": "signupDate",
                                "KeyType": "RANGE"
                            }
                        ],
                        "Projection": {
                            "ProjectionType": "ALL"
                        },
                        "ProvisionedThroughput": {
                            "ReadCapacityUnits": 5,
                            "WriteCapacityUnits": 5
                        }
                    }
                ]
            }
        },
        "ScalingRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "application-autoscaling.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:DescribeTable",
                                        "dynamodb:UpdateTable",
                                        "cloudwatch:PutMetricAlarm",
                                        "cloudwatch:DescribeAlarms",
                                        "cloudwatch:GetMetricStatistics",
                                        "cloudwatch:SetAlarmState",
                                        "cloudwatch:DeleteAlarms"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "UserTableWriteCapacityScalableTarget": {
            "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
            "Properties": {
                "MaxCapacity": 100,
                "MinCapacity": 5,
                "ResourceId": {
                    "Fn::Sub": "table/${userTableName}"
                },
                "RoleARN": {
                    "Fn::GetAtt": [
                        "ScalingRole",
                        "Arn"
                    ]
                },
                "ScalableDimension": "dynamodb:table:WriteCapacityUnits",
                "ServiceNamespace": "dynamodb"
            }
        },
        "UserTableWriteScalingPolicy": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
            "Properties": {
                "PolicyName": "WriteAutoScalingPolicy",
                "PolicyType": "TargetTrackingScaling",
                "ScalingTargetId": {
                    "Ref": "UserTableWriteCapacityScalableTarget"
                },
                "TargetTrackingScalingPolicyConfiguration": {
                    "TargetValue": 70,
                    "ScaleInCooldown": 60,
                    "ScaleOutCooldown": 60,
                    "PredefinedMetricSpecification": {
                        "PredefinedMetricType": "DynamoDBWriteCapacityUtilization"
                    }
                }
            }
        },
        "UserIndexWriteCapacityScalableTarget": {
            "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
            "Properties": {
                "MaxCapacity": 100,
                "MinCapacity": 5,
                "ResourceId": {
                    "Fn::Sub": "table/${userTableName}/index/${userIndexName}"
                },
                "RoleARN": {
                    "Fn::GetAtt": [
                        "ScalingRole",
                        "Arn"
                    ]
                },
                "ScalableDimension": "dynamodb:index:WriteCapacityUnits",
                "ServiceNamespace": "dynamodb"
            }
        },
        "UserIndexWriteScalingPolicy": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
            "Properties": {
                "PolicyName": "WriteAutoScalingPolicy",
                "PolicyType": "TargetTrackingScaling",
                "ScalingTargetId": {
                    "Ref": "UserIndexWriteCapacityScalableTarget"
                },
                "TargetTrackingScalingPolicyConfiguration": {
                    "TargetValue": 70,
                    "ScaleInCooldown": 60,
                    "ScaleOutCooldown": 60,
                    "PredefinedMetricSpecification": {
                        "PredefinedMetricType": "DynamoDBWriteCapacityUtilization"
                    }
                }
            }
        },
        "UserTableReadCapacityScalableTarget": {
            "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
            "Properties": {
                "MaxCapacity": 100,
                "MinCapacity": 5,
                "ResourceId": {
                    "Fn::Sub": "table/${userTableName}"
                },
                "RoleARN": {
                    "Fn::GetAtt": [
                        "ScalingRole",
                        "Arn"
                    ]
                },
                "ScalableDimension": "dynamodb:table:ReadCapacityUnits",
                "ServiceNamespace": "dynamodb"
            }
        },
        "UserTableReadScalingPolicy": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
            "Properties": {
                "PolicyName": "ReadAutoScalingPolicy",
                "PolicyType": "TargetTrackingScaling",
                "ScalingTargetId": {
                    "Ref": "UserTableReadCapacityScalableTarget"
                },
                "TargetTrackingScalingPolicyConfiguration": {
                    "TargetValue": 70,
                    "ScaleInCooldown": 60,
                    "ScaleOutCooldown": 60,
                    "PredefinedMetricSpecification": {
                        "PredefinedMetricType": "DynamoDBReadCapacityUtilization"
                    }
                }
            }
        },
        "UserIndexReadCapacityScalableTarget": {
            "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
            "Properties": {
                "MaxCapacity": 100,
                "MinCapacity": 5,
                "ResourceId": {
                    "Fn::Sub": "table/${userTableName}/index/${userIndexName}"
                },
                "RoleARN": {
                    "Fn::GetAtt": [
                        "ScalingRole",
                        "Arn"
                    ]
                },
                "ScalableDimension": "dynamodb:index:ReadCapacityUnits",
                "ServiceNamespace": "dynamodb"
            }
        },
        "UserIndexReadScalingPolicy": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
            "Properties": {
                "PolicyName": "ReadAutoScalingPolicy",
                "PolicyType": "TargetTrackingScaling",
                "ScalingTargetId": {
                    "Ref": "UserIndexReadCapacityScalableTarget"
                },
                "TargetTrackingScalingPolicyConfiguration": {
                    "TargetValue": 70,
                    "ScaleInCooldown": 60,
                    "ScaleOutCooldown": 60,
                    "PredefinedMetricSpecification": {
                        "PredefinedMetricType": "DynamoDBReadCapacityUtilization"
                    }
                }
            }
        }
    }
}