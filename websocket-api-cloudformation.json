{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Resources": {
        "Api": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
                "Name": {
                    "Ref": "AWS::StackName"
                },
                "ProtocolType": "WEBSOCKET",
                "RouteSelectionExpression": "\\$default"
            }
        },
        "DefaultRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
                "ApiId": {
                    "Ref": "Api"
                },
                "AuthorizationType": "NONE",
                "RouteKey": "$default",
                "Target": {
                    "Fn::Sub": "integrations/${KinesisIntegration}"
                }
            }
        },
        "Stage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
                "ApiId": {
                    "Ref": "Api"
                },
                "DeploymentId": {
                    "Ref": "Deployment"
                },
                "StageName": "v1",
                "DefaultRouteSettings": {
                    "LoggingLevel": "INFO",
                    "DataTraceEnabled": true
                }
            }
        },
        "Deployment": {
            "Type": "AWS::ApiGatewayV2::Deployment",
            "DependsOn": "DefaultRoute",
            "Properties": {
                "ApiId": {
                    "Ref": "Api"
                }
            }
        },
        "KinesisIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
                "ApiId": {
                    "Ref": "Api"
                },
                "CredentialsArn": {
                    "Fn::GetAtt": [
                        "IntegrationRole",
                        "Arn"
                    ]
                },
                "IntegrationMethod": "POST",
                "IntegrationType": "AWS",
                "IntegrationUri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:kinesis:action/PutRecord"
                },
                "RequestTemplates": {
                    "default": {
                        "Fn::Sub": "#set($payload = $input.json('$'))\n#set($data = \"{\"\"payload\"\": $payload, \"\"connectionId\"\": \"\"$context.connectionId\"\"}\")\n{\n    \"Data\": \"$util.base64Encode($data)\",\n    \"PartitionKey\": \"$context.connectionId\",\n    \"StreamName\": \"${EventStream}\"\n}\n"
                    }
                },
                "TemplateSelectionExpression": "default"
            }
        },
        "IntegrationRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "apigateway.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "logs",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "kinesis:PutRecord",
                                    "Resource": {
                                        "Fn::GetAtt": [
                                            "EventStream",
                                            "Arn"
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "EventStream": {
            "Type": "AWS::Kinesis::Stream",
            "Properties": {
                "ShardCount": 1
            }
        },
        "EventStreamConsumer": {
            "Type": "AWS::Kinesis::StreamConsumer",
            "Properties": {
                "ConsumerName": "lambda",
                "StreamARN": {
                    "Fn::GetAtt": [
                        "EventStream",
                        "Arn"
                    ]
                }
            }
        },
        "EventSourceMapping": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "Properties": {
                "BatchSize": 16,
                "Enabled": true,
                "EventSourceArn": {
                    "Ref": "EventStreamConsumer"
                },
                "FunctionName": {
                    "Fn::GetAtt": [
                        "StreamFunction",
                        "Arn"
                    ]
                },
                "StartingPosition": "LATEST"
            }
        },
        "StreamFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "index.handler",
                "Runtime": "nodejs8.10",
                "Layers": [
                    {
                        "Fn::Sub": "arn:aws:lambda:${AWS::Region}:853553028582:layer:monitoring-jump-start:1"
                    }
                ],
                "MemorySize": 128,
                "Timeout": 30,
                "Role": {
                    "Fn::GetAtt": [
                        "StreamRole",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": {
                        "Fn::Sub": "'use strict';\n\nconst AWS = require('aws-sdk');\nconst api = new AWS.ApiGatewayManagementApi({\n  apiVersion: '2018-11-29',\n  endpoint: '${Api}.execute-api.${AWS::Region}.amazonaws.com/${Stage}'\n});\nexports.handler = async (event) => {\n  console.log(JSON.stringify(event));\n  for (let r in event.Records) {\n      const data = JSON.parse(new Buffer(event.Records[r].kinesis.data, 'base64').toString());\n      try {\n        await api.postToConnection({\n          ConnectionId: data.connectionId,\n          Data: JSON.stringify(data.payload)\n        }).promise();\n      } catch (e) {\n        if (e.statusCode === 410) {\n          // do nothing, client disconnected\n          console.log('client disconnected');\n        } else {\n          throw e;\n        }\n      }    \n  }\n  return \"OK\";\n};\n"
                    }
                }
            }
        },
        "StreamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "lambda",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "execute-api:ManageConnections",
                                    "Resource": {
                                        "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/${Stage}/POST/@connections/*"
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "kinesis:ListShards"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "kinesis:SubscribeToShard",
                                        "kinesis:DescribeStreamSummary",
                                        "kinesis:GetShardIterator",
                                        "kinesis:GetRecords"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::GetAtt": [
                                                "EventStream",
                                                "Arn"
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "kinesis:SubscribeToShard"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::GetAtt": [
                                                "EventStreamConsumer",
                                                "ConsumerARN"
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "StreamLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": {
                    "Fn::Sub": "/aws/lambda/${StreamFunction}"
                },
                "RetentionInDays": 14
            }
        }
    },
    "Outputs": {
        "WebSocketURI": {
            "Value": {
                "Fn::Sub": "wss://${Api}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
            }
        }
    }
}